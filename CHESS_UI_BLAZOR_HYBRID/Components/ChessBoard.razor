@using Frontend.Model.ChessBoard
@using Frontend.Model.ChessMove
@using Frontend.Model.ChessPiece

<div class="turn-status">
    @if(GameManager?.CurrentBoard != null)
    {
        <p>@GameManager.CurrentBoard.Turn.ToString()'s turn to move</p>
    }
    else
    {
        <p>Loading turn status...</p>
    }
    
</div>

<div class="chessboard">
    @if (GameManager?.CurrentBoard != null) // Ensure CurrentBoard is not null
    {
    @for (int rank = 8; rank >= 1; rank--)
    {
    <div class="chessboard-row">
        @for (int file = 1; file <= 8; file++)
        {
        var position = PositionMethods.From(file, rank);
        var square = GameManager.CurrentBoard.Squares[position];
        
        var onclickFile = file;
        var onclickRank = rank;


        <div class="chessboard-square @(square.IsDark ? "dark" : "light")" @onclick="() => OnSquareClicked(onclickFile, onclickRank)">
            @if (_selectedFile == file && _selectedRank == rank)
            {
                if (square.Piece != null) // If there is a piece on the square
                {
                    if (square.Piece.Set == GameManager.CurrentBoard.Turn) // If the piece belongs to the current player
                    {
                        <div class="highlight-overlay"></div>
                    }
                }
        
                
                //TODO: Add logic to highlight possible moves - DONE
                //TODO: Add dot to indicate possible moves - DONE
                //TODO: Make sure to only highlight legal moves - Check whether there is a piece on the square and whether it is the player's own piece - DONE
                //TODO: Add logic to move piece - DONE
                //TODO: Add logic to capture piece - DONE
                //TODO: Add animation for piece movement
                //TODO: Add logic to check for checkmate
                //TODO: Add logic to check for stalemate
                //TODO: Add logic to check for draw
                //TODO: Add logic to promote pawn
                //TODO: Look into move history
                //TODO: Undo move
                
            }
            @if (_legalMoves != null)
            {
                foreach (var boardMove in _legalMoves)
                {
                    var moveFile = FileMethods.GetFileInt(boardMove.To);
                    var moveRank = RankMethods.GetRankInt(boardMove.To);
                    if (moveFile == file && moveRank == rank)
                    {
                        if (boardMove.PreMove != null)
                        {
                            
                            <div class="capture-dot" @onclick="() => OnMoveDotClicked(boardMove)"></div>
                            
                        }
                        else
                        {
                            <div class="move-dot"></div>
                            <div class="clickable-overlay" @onclick="() => OnMoveDotClicked(boardMove)"></div>
                        }
                    }
                }
            }
            @if (square.Piece != null)
            {
                <img src="@GetPieceImage(square.Piece)" alt="@square.Piece.GetType().Name" />
            }
        </div>
        }
    </div>
    }
    }
    else
    {
    <p>Loading board...</p>
    }
</div>

@code {
[Parameter]
public Frontend.Controller.GameManager GameManager { get; set; } // Passed as a parameter

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("ChessBoard: Parameters set, attempting to render.");
        await Task.Delay(1000);
        GameManager.PerformNextMove();
        StateHasChanged(); // Trigger UI update after first move
    }


private string GetPieceImage(IPiece piece)
{
// Map piece type and set to an image URL
var filePath = $"images/{piece.GetType().Name.ToLower()}_{piece.Set.ToString().ToLower()}.svg";

    // Print the file path to the console for debugging
    // Console.WriteLine("File path: " + filePath);
return $"images/{piece.GetType().Name.ToLower()}_{piece.Set.ToString().ToLower()}.svg";
}


private int? _selectedFile;
private int? _selectedRank;
private List<BoardMove>? _legalMoves;


private Task OnSquareClicked(int file, int rank)
{
    _selectedFile = file;
    _selectedRank = rank;
    
    var pos = PositionMethods.From(file, rank);
    Console.WriteLine("Position:" + pos);
    Console.WriteLine(GameManager.CurrentBoard.Turn.ToString());
    
    _legalMoves = GameManager.GetLegalMoves(PositionMethods.From(file, rank));
    
    foreach (var boardMove in _legalMoves)
    {
        Console.WriteLine($"Legal move: {boardMove.ToString(false)}");
        var moveFile = FileMethods.GetFileInt(boardMove.To);
        var moveRank = RankMethods.GetRankInt(boardMove.To);
        Console.WriteLine("Move file: " + moveFile + " Move rank: " + moveRank);
    }
    
    return Task.CompletedTask;
}


private Task OnMoveDotClicked(BoardMove boardMove)
{
    GameManager.OnUserMove(boardMove);
    return Task.CompletedTask;
}

}
